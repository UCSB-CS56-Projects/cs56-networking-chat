
plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

// In this section you declare where to find the dependencies of your project

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

apply plugin: "jacoco"
apply plugin: "java"



jar {
    description = "make Server.jar"
    archiveName = "Server.jar"

    from {

        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }

        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    manifest {
        attributes 'Main-Class': 'server.controller.RunServer'
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

task clientJar(type:Jar, dependsOn:jar){
    description = "make Client.jar"
    from sourceSets.main.output
    archiveName = "Client.jar"
    from{
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }

        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    manifest {
        attributes 'Main-Class': 'Client.controller.RunClient'

    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}


task client(type: JavaExec, dependsOn: classes) {
    description = "run client"
    main = 'client.controller.RunClient'
    classpath = sourceSets.main.runtimeClasspath
}

task server(type: JavaExec, dependsOn: classes) {
    description = "run server"
    main = 'server.controller.RunServer'
    classpath = sourceSets.main.runtimeClasspath
}


test {
    ignoreFailures = true
}

jacoco {
    toolVersion = "0.8.0"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}
javadoc{
    failOnError false 
}

